// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/skale-indexer/store (interfaces: DataStore)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	structs "github.com/figment-networks/skale-indexer/scraper/structs"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CalculateActiveNodes mocks base method
func (m *MockDataStore) CalculateActiveNodes(arg0 context.Context, arg1 structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateActiveNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateActiveNodes indicates an expected call of CalculateActiveNodes
func (mr *MockDataStoreMockRecorder) CalculateActiveNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateActiveNodes", reflect.TypeOf((*MockDataStore)(nil).CalculateActiveNodes), arg0, arg1)
}

// CalculateLinkedNodes mocks base method
func (m *MockDataStore) CalculateLinkedNodes(arg0 context.Context, arg1 structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLinkedNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateLinkedNodes indicates an expected call of CalculateLinkedNodes
func (mr *MockDataStoreMockRecorder) CalculateLinkedNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLinkedNodes", reflect.TypeOf((*MockDataStore)(nil).CalculateLinkedNodes), arg0, arg1)
}

// CalculateTotalStake mocks base method
func (m *MockDataStore) CalculateTotalStake(arg0 context.Context, arg1 structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalStake", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateTotalStake indicates an expected call of CalculateTotalStake
func (mr *MockDataStoreMockRecorder) CalculateTotalStake(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalStake", reflect.TypeOf((*MockDataStore)(nil).CalculateTotalStake), arg0, arg1)
}

// GetAccounts mocks base method
func (m *MockDataStore) GetAccounts(arg0 context.Context, arg1 structs.AccountParams) ([]structs.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", arg0, arg1)
	ret0, _ := ret[0].([]structs.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts
func (mr *MockDataStoreMockRecorder) GetAccounts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockDataStore)(nil).GetAccounts), arg0, arg1)
}

// GetContractEvents mocks base method
func (m *MockDataStore) GetContractEvents(arg0 context.Context, arg1 structs.EventParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", arg0, arg1)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockDataStoreMockRecorder) GetContractEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockDataStore)(nil).GetContractEvents), arg0, arg1)
}

// GetDelegationTimeline mocks base method
func (m *MockDataStore) GetDelegationTimeline(arg0 context.Context, arg1 structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationTimeline", arg0, arg1)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationTimeline indicates an expected call of GetDelegationTimeline
func (mr *MockDataStoreMockRecorder) GetDelegationTimeline(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationTimeline", reflect.TypeOf((*MockDataStore)(nil).GetDelegationTimeline), arg0, arg1)
}

// GetDelegations mocks base method
func (m *MockDataStore) GetDelegations(arg0 context.Context, arg1 structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", arg0, arg1)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockDataStoreMockRecorder) GetDelegations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDataStore)(nil).GetDelegations), arg0, arg1)
}

// GetNodes mocks base method
func (m *MockDataStore) GetNodes(arg0 context.Context, arg1 structs.NodeParams) ([]structs.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", arg0, arg1)
	ret0, _ := ret[0].([]structs.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockDataStoreMockRecorder) GetNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockDataStore)(nil).GetNodes), arg0, arg1)
}

// GetValidatorStatistics mocks base method
func (m *MockDataStore) GetValidatorStatistics(arg0 context.Context, arg1 structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatistics", arg0, arg1)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatistics indicates an expected call of GetValidatorStatistics
func (mr *MockDataStoreMockRecorder) GetValidatorStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatistics", reflect.TypeOf((*MockDataStore)(nil).GetValidatorStatistics), arg0, arg1)
}

// GetValidatorStatisticsChart mocks base method
func (m *MockDataStore) GetValidatorStatisticsChart(arg0 context.Context, arg1 structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatisticsChart", arg0, arg1)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatisticsChart indicates an expected call of GetValidatorStatisticsChart
func (mr *MockDataStoreMockRecorder) GetValidatorStatisticsChart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatisticsChart", reflect.TypeOf((*MockDataStore)(nil).GetValidatorStatisticsChart), arg0, arg1)
}

// GetValidators mocks base method
func (m *MockDataStore) GetValidators(arg0 context.Context, arg1 structs.ValidatorParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", arg0, arg1)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockDataStoreMockRecorder) GetValidators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockDataStore)(nil).GetValidators), arg0, arg1)
}

// SaveAccount mocks base method
func (m *MockDataStore) SaveAccount(arg0 context.Context, arg1 structs.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount
func (mr *MockDataStoreMockRecorder) SaveAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockDataStore)(nil).SaveAccount), arg0, arg1)
}

// SaveContractEvent mocks base method
func (m *MockDataStore) SaveContractEvent(arg0 context.Context, arg1 structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockDataStoreMockRecorder) SaveContractEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockDataStore)(nil).SaveContractEvent), arg0, arg1)
}

// SaveDelegation mocks base method
func (m *MockDataStore) SaveDelegation(arg0 context.Context, arg1 structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDelegation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDelegation indicates an expected call of SaveDelegation
func (mr *MockDataStoreMockRecorder) SaveDelegation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDelegation", reflect.TypeOf((*MockDataStore)(nil).SaveDelegation), arg0, arg1)
}

// SaveNode mocks base method
func (m *MockDataStore) SaveNode(arg0 context.Context, arg1 structs.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNode indicates an expected call of SaveNode
func (mr *MockDataStoreMockRecorder) SaveNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNode", reflect.TypeOf((*MockDataStore)(nil).SaveNode), arg0, arg1)
}

// SaveValidator mocks base method
func (m *MockDataStore) SaveValidator(arg0 context.Context, arg1 structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidator", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidator indicates an expected call of SaveValidator
func (mr *MockDataStoreMockRecorder) SaveValidator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidator", reflect.TypeOf((*MockDataStore)(nil).SaveValidator), arg0, arg1)
}

// SaveValidatorStatistic mocks base method
func (m *MockDataStore) SaveValidatorStatistic(arg0 context.Context, arg1 *big.Int, arg2 uint64, arg3 structs.StatisticTypeVS, arg4 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidatorStatistic", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidatorStatistic indicates an expected call of SaveValidatorStatistic
func (mr *MockDataStoreMockRecorder) SaveValidatorStatistic(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidatorStatistic", reflect.TypeOf((*MockDataStore)(nil).SaveValidatorStatistic), arg0, arg1, arg2, arg3, arg4)
}
