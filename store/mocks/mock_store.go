// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	structs "github.com/figment-networks/skale-indexer/scraper/structs"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockDBDriver is a mock of DBDriver interface
type MockDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDBDriverMockRecorder
}

// MockDBDriverMockRecorder is the mock recorder for MockDBDriver
type MockDBDriverMockRecorder struct {
	mock *MockDBDriver
}

// NewMockDBDriver creates a new mock instance
func NewMockDBDriver(ctrl *gomock.Controller) *MockDBDriver {
	mock := &MockDBDriver{ctrl: ctrl}
	mock.recorder = &MockDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBDriver) EXPECT() *MockDBDriverMockRecorder {
	return m.recorder
}

// SaveContractEvent mocks base method
func (m *MockDBDriver) SaveContractEvent(ctx context.Context, contractEvent structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", ctx, contractEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockDBDriverMockRecorder) SaveContractEvent(ctx, contractEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockDBDriver)(nil).SaveContractEvent), ctx, contractEvent)
}

// GetContractEvents mocks base method
func (m *MockDBDriver) GetContractEvents(ctx context.Context, params structs.EventParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", ctx, params)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockDBDriverMockRecorder) GetContractEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockDBDriver)(nil).GetContractEvents), ctx, params)
}

// SaveSystemEvent mocks base method
func (m *MockDBDriver) SaveSystemEvent(ctx context.Context, event structs.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSystemEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSystemEvent indicates an expected call of SaveSystemEvent
func (mr *MockDBDriverMockRecorder) SaveSystemEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSystemEvent", reflect.TypeOf((*MockDBDriver)(nil).SaveSystemEvent), ctx, event)
}

// GetSystemEvents mocks base method
func (m *MockDBDriver) GetSystemEvents(ctx context.Context, params structs.SystemEventParams) ([]structs.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemEvents", ctx, params)
	ret0, _ := ret[0].([]structs.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemEvents indicates an expected call of GetSystemEvents
func (mr *MockDBDriverMockRecorder) GetSystemEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemEvents", reflect.TypeOf((*MockDBDriver)(nil).GetSystemEvents), ctx, params)
}

// SaveNodes mocks base method
func (m *MockDBDriver) SaveNodes(ctx context.Context, nodes []structs.Node, removedNodeAddress common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNodes", ctx, nodes, removedNodeAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNodes indicates an expected call of SaveNodes
func (mr *MockDBDriverMockRecorder) SaveNodes(ctx, nodes, removedNodeAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNodes", reflect.TypeOf((*MockDBDriver)(nil).SaveNodes), ctx, nodes, removedNodeAddress)
}

// GetNodes mocks base method
func (m *MockDBDriver) GetNodes(ctx context.Context, params structs.NodeParams) ([]structs.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx, params)
	ret0, _ := ret[0].([]structs.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockDBDriverMockRecorder) GetNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockDBDriver)(nil).GetNodes), ctx, params)
}

// SaveValidator mocks base method
func (m *MockDBDriver) SaveValidator(ctx context.Context, validator structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidator", ctx, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidator indicates an expected call of SaveValidator
func (mr *MockDBDriverMockRecorder) SaveValidator(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidator", reflect.TypeOf((*MockDBDriver)(nil).SaveValidator), ctx, validator)
}

// GetValidators mocks base method
func (m *MockDBDriver) GetValidators(ctx context.Context, params structs.ValidatorParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx, params)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockDBDriverMockRecorder) GetValidators(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockDBDriver)(nil).GetValidators), ctx, params)
}

// SaveDelegation mocks base method
func (m *MockDBDriver) SaveDelegation(ctx context.Context, delegation structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDelegation indicates an expected call of SaveDelegation
func (mr *MockDBDriverMockRecorder) SaveDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDelegation", reflect.TypeOf((*MockDBDriver)(nil).SaveDelegation), ctx, delegation)
}

// GetDelegations mocks base method
func (m *MockDBDriver) GetDelegations(ctx context.Context, params structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockDBDriverMockRecorder) GetDelegations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDBDriver)(nil).GetDelegations), ctx, params)
}

// GetDelegationTimeline mocks base method
func (m *MockDBDriver) GetDelegationTimeline(ctx context.Context, params structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationTimeline", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationTimeline indicates an expected call of GetDelegationTimeline
func (mr *MockDBDriverMockRecorder) GetDelegationTimeline(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationTimeline", reflect.TypeOf((*MockDBDriver)(nil).GetDelegationTimeline), ctx, params)
}

// SaveAccount mocks base method
func (m *MockDBDriver) SaveAccount(ctx context.Context, account structs.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount
func (mr *MockDBDriverMockRecorder) SaveAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockDBDriver)(nil).SaveAccount), ctx, account)
}

// GetAccounts mocks base method
func (m *MockDBDriver) GetAccounts(ctx context.Context, params structs.AccountParams) ([]structs.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, params)
	ret0, _ := ret[0].([]structs.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts
func (mr *MockDBDriverMockRecorder) GetAccounts(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockDBDriver)(nil).GetAccounts), ctx, params)
}

// SaveValidatorStatistic mocks base method
func (m *MockDBDriver) SaveValidatorStatistic(ctx context.Context, validatorID *big.Int, blockHeight uint64, statisticsType structs.StatisticTypeVS, amount *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidatorStatistic", ctx, validatorID, blockHeight, statisticsType, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidatorStatistic indicates an expected call of SaveValidatorStatistic
func (mr *MockDBDriverMockRecorder) SaveValidatorStatistic(ctx, validatorID, blockHeight, statisticsType, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidatorStatistic", reflect.TypeOf((*MockDBDriver)(nil).SaveValidatorStatistic), ctx, validatorID, blockHeight, statisticsType, amount)
}

// GetValidatorStatistics mocks base method
func (m *MockDBDriver) GetValidatorStatistics(ctx context.Context, params structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatistics", ctx, params)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatistics indicates an expected call of GetValidatorStatistics
func (mr *MockDBDriverMockRecorder) GetValidatorStatistics(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatistics", reflect.TypeOf((*MockDBDriver)(nil).GetValidatorStatistics), ctx, params)
}

// GetValidatorStatisticsTimeline mocks base method
func (m *MockDBDriver) GetValidatorStatisticsTimeline(ctx context.Context, params structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatisticsTimeline", ctx, params)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatisticsTimeline indicates an expected call of GetValidatorStatisticsTimeline
func (mr *MockDBDriverMockRecorder) GetValidatorStatisticsTimeline(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatisticsTimeline", reflect.TypeOf((*MockDBDriver)(nil).GetValidatorStatisticsTimeline), ctx, params)
}

// CalculateTotalStake mocks base method
func (m *MockDBDriver) CalculateTotalStake(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalStake", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateTotalStake indicates an expected call of CalculateTotalStake
func (mr *MockDBDriverMockRecorder) CalculateTotalStake(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalStake", reflect.TypeOf((*MockDBDriver)(nil).CalculateTotalStake), ctx, params)
}

// CalculateActiveNodes mocks base method
func (m *MockDBDriver) CalculateActiveNodes(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateActiveNodes", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateActiveNodes indicates an expected call of CalculateActiveNodes
func (mr *MockDBDriverMockRecorder) CalculateActiveNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateActiveNodes", reflect.TypeOf((*MockDBDriver)(nil).CalculateActiveNodes), ctx, params)
}

// CalculateLinkedNodes mocks base method
func (m *MockDBDriver) CalculateLinkedNodes(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLinkedNodes", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateLinkedNodes indicates an expected call of CalculateLinkedNodes
func (mr *MockDBDriverMockRecorder) CalculateLinkedNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLinkedNodes", reflect.TypeOf((*MockDBDriver)(nil).CalculateLinkedNodes), ctx, params)
}

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// SaveContractEvent mocks base method
func (m *MockDataStore) SaveContractEvent(ctx context.Context, contractEvent structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", ctx, contractEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockDataStoreMockRecorder) SaveContractEvent(ctx, contractEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockDataStore)(nil).SaveContractEvent), ctx, contractEvent)
}

// GetContractEvents mocks base method
func (m *MockDataStore) GetContractEvents(ctx context.Context, params structs.EventParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", ctx, params)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockDataStoreMockRecorder) GetContractEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockDataStore)(nil).GetContractEvents), ctx, params)
}

// SaveSystemEvent mocks base method
func (m *MockDataStore) SaveSystemEvent(ctx context.Context, event structs.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSystemEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSystemEvent indicates an expected call of SaveSystemEvent
func (mr *MockDataStoreMockRecorder) SaveSystemEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSystemEvent", reflect.TypeOf((*MockDataStore)(nil).SaveSystemEvent), ctx, event)
}

// GetSystemEvents mocks base method
func (m *MockDataStore) GetSystemEvents(ctx context.Context, params structs.SystemEventParams) ([]structs.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemEvents", ctx, params)
	ret0, _ := ret[0].([]structs.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemEvents indicates an expected call of GetSystemEvents
func (mr *MockDataStoreMockRecorder) GetSystemEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemEvents", reflect.TypeOf((*MockDataStore)(nil).GetSystemEvents), ctx, params)
}

// SaveNodes mocks base method
func (m *MockDataStore) SaveNodes(ctx context.Context, nodes []structs.Node, removedNodeAddress common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNodes", ctx, nodes, removedNodeAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNodes indicates an expected call of SaveNodes
func (mr *MockDataStoreMockRecorder) SaveNodes(ctx, nodes, removedNodeAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNodes", reflect.TypeOf((*MockDataStore)(nil).SaveNodes), ctx, nodes, removedNodeAddress)
}

// GetNodes mocks base method
func (m *MockDataStore) GetNodes(ctx context.Context, params structs.NodeParams) ([]structs.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx, params)
	ret0, _ := ret[0].([]structs.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockDataStoreMockRecorder) GetNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockDataStore)(nil).GetNodes), ctx, params)
}

// SaveValidator mocks base method
func (m *MockDataStore) SaveValidator(ctx context.Context, validator structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidator", ctx, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidator indicates an expected call of SaveValidator
func (mr *MockDataStoreMockRecorder) SaveValidator(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidator", reflect.TypeOf((*MockDataStore)(nil).SaveValidator), ctx, validator)
}

// GetValidators mocks base method
func (m *MockDataStore) GetValidators(ctx context.Context, params structs.ValidatorParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx, params)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockDataStoreMockRecorder) GetValidators(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockDataStore)(nil).GetValidators), ctx, params)
}

// SaveDelegation mocks base method
func (m *MockDataStore) SaveDelegation(ctx context.Context, delegation structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDelegation indicates an expected call of SaveDelegation
func (mr *MockDataStoreMockRecorder) SaveDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDelegation", reflect.TypeOf((*MockDataStore)(nil).SaveDelegation), ctx, delegation)
}

// GetDelegations mocks base method
func (m *MockDataStore) GetDelegations(ctx context.Context, params structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockDataStoreMockRecorder) GetDelegations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDataStore)(nil).GetDelegations), ctx, params)
}

// GetDelegationTimeline mocks base method
func (m *MockDataStore) GetDelegationTimeline(ctx context.Context, params structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationTimeline", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationTimeline indicates an expected call of GetDelegationTimeline
func (mr *MockDataStoreMockRecorder) GetDelegationTimeline(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationTimeline", reflect.TypeOf((*MockDataStore)(nil).GetDelegationTimeline), ctx, params)
}

// SaveAccount mocks base method
func (m *MockDataStore) SaveAccount(ctx context.Context, account structs.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount
func (mr *MockDataStoreMockRecorder) SaveAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockDataStore)(nil).SaveAccount), ctx, account)
}

// GetAccounts mocks base method
func (m *MockDataStore) GetAccounts(ctx context.Context, params structs.AccountParams) ([]structs.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, params)
	ret0, _ := ret[0].([]structs.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts
func (mr *MockDataStoreMockRecorder) GetAccounts(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockDataStore)(nil).GetAccounts), ctx, params)
}

// SaveValidatorStatistic mocks base method
func (m *MockDataStore) SaveValidatorStatistic(ctx context.Context, validatorID *big.Int, blockHeight uint64, statisticsType structs.StatisticTypeVS, amount *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidatorStatistic", ctx, validatorID, blockHeight, statisticsType, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidatorStatistic indicates an expected call of SaveValidatorStatistic
func (mr *MockDataStoreMockRecorder) SaveValidatorStatistic(ctx, validatorID, blockHeight, statisticsType, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidatorStatistic", reflect.TypeOf((*MockDataStore)(nil).SaveValidatorStatistic), ctx, validatorID, blockHeight, statisticsType, amount)
}

// GetValidatorStatistics mocks base method
func (m *MockDataStore) GetValidatorStatistics(ctx context.Context, params structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatistics", ctx, params)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatistics indicates an expected call of GetValidatorStatistics
func (mr *MockDataStoreMockRecorder) GetValidatorStatistics(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatistics", reflect.TypeOf((*MockDataStore)(nil).GetValidatorStatistics), ctx, params)
}

// GetValidatorStatisticsTimeline mocks base method
func (m *MockDataStore) GetValidatorStatisticsTimeline(ctx context.Context, params structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatisticsTimeline", ctx, params)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatisticsTimeline indicates an expected call of GetValidatorStatisticsTimeline
func (mr *MockDataStoreMockRecorder) GetValidatorStatisticsTimeline(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatisticsTimeline", reflect.TypeOf((*MockDataStore)(nil).GetValidatorStatisticsTimeline), ctx, params)
}

// CalculateTotalStake mocks base method
func (m *MockDataStore) CalculateTotalStake(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalStake", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateTotalStake indicates an expected call of CalculateTotalStake
func (mr *MockDataStoreMockRecorder) CalculateTotalStake(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalStake", reflect.TypeOf((*MockDataStore)(nil).CalculateTotalStake), ctx, params)
}

// CalculateActiveNodes mocks base method
func (m *MockDataStore) CalculateActiveNodes(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateActiveNodes", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateActiveNodes indicates an expected call of CalculateActiveNodes
func (mr *MockDataStoreMockRecorder) CalculateActiveNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateActiveNodes", reflect.TypeOf((*MockDataStore)(nil).CalculateActiveNodes), ctx, params)
}

// CalculateLinkedNodes mocks base method
func (m *MockDataStore) CalculateLinkedNodes(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLinkedNodes", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateLinkedNodes indicates an expected call of CalculateLinkedNodes
func (mr *MockDataStoreMockRecorder) CalculateLinkedNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLinkedNodes", reflect.TypeOf((*MockDataStore)(nil).CalculateLinkedNodes), ctx, params)
}

// MockSkaleStore is a mock of SkaleStore interface
type MockSkaleStore struct {
	ctrl     *gomock.Controller
	recorder *MockSkaleStoreMockRecorder
}

// MockSkaleStoreMockRecorder is the mock recorder for MockSkaleStore
type MockSkaleStoreMockRecorder struct {
	mock *MockSkaleStore
}

// NewMockSkaleStore creates a new mock instance
func NewMockSkaleStore(ctrl *gomock.Controller) *MockSkaleStore {
	mock := &MockSkaleStore{ctrl: ctrl}
	mock.recorder = &MockSkaleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSkaleStore) EXPECT() *MockSkaleStoreMockRecorder {
	return m.recorder
}

// SaveNodes mocks base method
func (m *MockSkaleStore) SaveNodes(ctx context.Context, nodes []structs.Node, removedNodeAddress common.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNodes", ctx, nodes, removedNodeAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNodes indicates an expected call of SaveNodes
func (mr *MockSkaleStoreMockRecorder) SaveNodes(ctx, nodes, removedNodeAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNodes", reflect.TypeOf((*MockSkaleStore)(nil).SaveNodes), ctx, nodes, removedNodeAddress)
}

// GetNodes mocks base method
func (m *MockSkaleStore) GetNodes(ctx context.Context, params structs.NodeParams) ([]structs.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx, params)
	ret0, _ := ret[0].([]structs.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockSkaleStoreMockRecorder) GetNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockSkaleStore)(nil).GetNodes), ctx, params)
}

// SaveValidator mocks base method
func (m *MockSkaleStore) SaveValidator(ctx context.Context, validator structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidator", ctx, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidator indicates an expected call of SaveValidator
func (mr *MockSkaleStoreMockRecorder) SaveValidator(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidator", reflect.TypeOf((*MockSkaleStore)(nil).SaveValidator), ctx, validator)
}

// GetValidators mocks base method
func (m *MockSkaleStore) GetValidators(ctx context.Context, params structs.ValidatorParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx, params)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockSkaleStoreMockRecorder) GetValidators(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockSkaleStore)(nil).GetValidators), ctx, params)
}

// SaveDelegation mocks base method
func (m *MockSkaleStore) SaveDelegation(ctx context.Context, delegation structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDelegation indicates an expected call of SaveDelegation
func (mr *MockSkaleStoreMockRecorder) SaveDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDelegation", reflect.TypeOf((*MockSkaleStore)(nil).SaveDelegation), ctx, delegation)
}

// GetDelegations mocks base method
func (m *MockSkaleStore) GetDelegations(ctx context.Context, params structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockSkaleStoreMockRecorder) GetDelegations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockSkaleStore)(nil).GetDelegations), ctx, params)
}

// GetDelegationTimeline mocks base method
func (m *MockSkaleStore) GetDelegationTimeline(ctx context.Context, params structs.DelegationParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationTimeline", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationTimeline indicates an expected call of GetDelegationTimeline
func (mr *MockSkaleStoreMockRecorder) GetDelegationTimeline(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationTimeline", reflect.TypeOf((*MockSkaleStore)(nil).GetDelegationTimeline), ctx, params)
}

// SaveAccount mocks base method
func (m *MockSkaleStore) SaveAccount(ctx context.Context, account structs.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAccount indicates an expected call of SaveAccount
func (mr *MockSkaleStoreMockRecorder) SaveAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAccount", reflect.TypeOf((*MockSkaleStore)(nil).SaveAccount), ctx, account)
}

// GetAccounts mocks base method
func (m *MockSkaleStore) GetAccounts(ctx context.Context, params structs.AccountParams) ([]structs.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccounts", ctx, params)
	ret0, _ := ret[0].([]structs.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccounts indicates an expected call of GetAccounts
func (mr *MockSkaleStoreMockRecorder) GetAccounts(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccounts", reflect.TypeOf((*MockSkaleStore)(nil).GetAccounts), ctx, params)
}

// SaveValidatorStatistic mocks base method
func (m *MockSkaleStore) SaveValidatorStatistic(ctx context.Context, validatorID *big.Int, blockHeight uint64, statisticsType structs.StatisticTypeVS, amount *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveValidatorStatistic", ctx, validatorID, blockHeight, statisticsType, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveValidatorStatistic indicates an expected call of SaveValidatorStatistic
func (mr *MockSkaleStoreMockRecorder) SaveValidatorStatistic(ctx, validatorID, blockHeight, statisticsType, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveValidatorStatistic", reflect.TypeOf((*MockSkaleStore)(nil).SaveValidatorStatistic), ctx, validatorID, blockHeight, statisticsType, amount)
}

// GetValidatorStatistics mocks base method
func (m *MockSkaleStore) GetValidatorStatistics(ctx context.Context, params structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatistics", ctx, params)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatistics indicates an expected call of GetValidatorStatistics
func (mr *MockSkaleStoreMockRecorder) GetValidatorStatistics(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatistics", reflect.TypeOf((*MockSkaleStore)(nil).GetValidatorStatistics), ctx, params)
}

// GetValidatorStatisticsTimeline mocks base method
func (m *MockSkaleStore) GetValidatorStatisticsTimeline(ctx context.Context, params structs.ValidatorStatisticsParams) ([]structs.ValidatorStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorStatisticsTimeline", ctx, params)
	ret0, _ := ret[0].([]structs.ValidatorStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorStatisticsTimeline indicates an expected call of GetValidatorStatisticsTimeline
func (mr *MockSkaleStoreMockRecorder) GetValidatorStatisticsTimeline(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorStatisticsTimeline", reflect.TypeOf((*MockSkaleStore)(nil).GetValidatorStatisticsTimeline), ctx, params)
}

// CalculateTotalStake mocks base method
func (m *MockSkaleStore) CalculateTotalStake(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalStake", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateTotalStake indicates an expected call of CalculateTotalStake
func (mr *MockSkaleStoreMockRecorder) CalculateTotalStake(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalStake", reflect.TypeOf((*MockSkaleStore)(nil).CalculateTotalStake), ctx, params)
}

// CalculateActiveNodes mocks base method
func (m *MockSkaleStore) CalculateActiveNodes(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateActiveNodes", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateActiveNodes indicates an expected call of CalculateActiveNodes
func (mr *MockSkaleStoreMockRecorder) CalculateActiveNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateActiveNodes", reflect.TypeOf((*MockSkaleStore)(nil).CalculateActiveNodes), ctx, params)
}

// CalculateLinkedNodes mocks base method
func (m *MockSkaleStore) CalculateLinkedNodes(ctx context.Context, params structs.ValidatorStatisticsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLinkedNodes", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateLinkedNodes indicates an expected call of CalculateLinkedNodes
func (mr *MockSkaleStoreMockRecorder) CalculateLinkedNodes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLinkedNodes", reflect.TypeOf((*MockSkaleStore)(nil).CalculateLinkedNodes), ctx, params)
}

// MockContractEventStore is a mock of ContractEventStore interface
type MockContractEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockContractEventStoreMockRecorder
}

// MockContractEventStoreMockRecorder is the mock recorder for MockContractEventStore
type MockContractEventStoreMockRecorder struct {
	mock *MockContractEventStore
}

// NewMockContractEventStore creates a new mock instance
func NewMockContractEventStore(ctrl *gomock.Controller) *MockContractEventStore {
	mock := &MockContractEventStore{ctrl: ctrl}
	mock.recorder = &MockContractEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractEventStore) EXPECT() *MockContractEventStoreMockRecorder {
	return m.recorder
}

// SaveContractEvent mocks base method
func (m *MockContractEventStore) SaveContractEvent(ctx context.Context, contractEvent structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", ctx, contractEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockContractEventStoreMockRecorder) SaveContractEvent(ctx, contractEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockContractEventStore)(nil).SaveContractEvent), ctx, contractEvent)
}

// GetContractEvents mocks base method
func (m *MockContractEventStore) GetContractEvents(ctx context.Context, params structs.EventParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", ctx, params)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockContractEventStoreMockRecorder) GetContractEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockContractEventStore)(nil).GetContractEvents), ctx, params)
}

// MockSystemEventStore is a mock of SystemEventStore interface
type MockSystemEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockSystemEventStoreMockRecorder
}

// MockSystemEventStoreMockRecorder is the mock recorder for MockSystemEventStore
type MockSystemEventStoreMockRecorder struct {
	mock *MockSystemEventStore
}

// NewMockSystemEventStore creates a new mock instance
func NewMockSystemEventStore(ctrl *gomock.Controller) *MockSystemEventStore {
	mock := &MockSystemEventStore{ctrl: ctrl}
	mock.recorder = &MockSystemEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSystemEventStore) EXPECT() *MockSystemEventStoreMockRecorder {
	return m.recorder
}

// SaveSystemEvent mocks base method
func (m *MockSystemEventStore) SaveSystemEvent(ctx context.Context, event structs.SystemEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSystemEvent", ctx, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSystemEvent indicates an expected call of SaveSystemEvent
func (mr *MockSystemEventStoreMockRecorder) SaveSystemEvent(ctx, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSystemEvent", reflect.TypeOf((*MockSystemEventStore)(nil).SaveSystemEvent), ctx, event)
}

// GetSystemEvents mocks base method
func (m *MockSystemEventStore) GetSystemEvents(ctx context.Context, params structs.SystemEventParams) ([]structs.SystemEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemEvents", ctx, params)
	ret0, _ := ret[0].([]structs.SystemEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemEvents indicates an expected call of GetSystemEvents
func (mr *MockSystemEventStoreMockRecorder) GetSystemEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemEvents", reflect.TypeOf((*MockSystemEventStore)(nil).GetSystemEvents), ctx, params)
}
