// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	structs "../structs"
	gomock "github.com/golang/mock/gomock"
)

// MockDBDriver is a mock of DBDriver interface.
type MockDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDBDriverMockRecorder
}

// MockDBDriverMockRecorder is the mock recorder for MockDBDriver.
type MockDBDriverMockRecorder struct {
	mock *MockDBDriver
}

// NewMockDBDriver creates a new mock instance.
func NewMockDBDriver(ctrl *gomock.Controller) *MockDBDriver {
	mock := &MockDBDriver{ctrl: ctrl}
	mock.recorder = &MockDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBDriver) EXPECT() *MockDBDriverMockRecorder {
	return m.recorder
}

// SaveOrUpdateDelegation mocks base method.
func (m *MockDBDriver) SaveOrUpdateDelegation(ctx context.Context, delegation structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegation indicates an expected call of SaveOrUpdateDelegation.
func (mr *MockDBDriverMockRecorder) SaveOrUpdateDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegation", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateDelegation), ctx, delegation)
}

// SaveOrUpdateDelegations mocks base method.
func (m *MockDBDriver) SaveOrUpdateDelegations(ctx context.Context, delegations []structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegations", ctx, delegations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegations indicates an expected call of SaveOrUpdateDelegations.
func (mr *MockDBDriverMockRecorder) SaveOrUpdateDelegations(ctx, delegations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegations", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateDelegations), ctx, delegations)
}

// GetDelegationById mocks base method.
func (m *MockDBDriver) GetDelegationById(ctx context.Context, id *string) (structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationById", ctx, id)
	ret0, _ := ret[0].(structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationById indicates an expected call of GetDelegationById.
func (mr *MockDBDriverMockRecorder) GetDelegationById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationById", reflect.TypeOf((*MockDBDriver)(nil).GetDelegationById), ctx, id)
}

// GetDelegationsByHolder mocks base method.
func (m *MockDBDriver) GetDelegationsByHolder(ctx context.Context, holder *string) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByHolder", ctx, holder)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByHolder indicates an expected call of GetDelegationsByHolder.
func (mr *MockDBDriverMockRecorder) GetDelegationsByHolder(ctx, holder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByHolder", reflect.TypeOf((*MockDBDriver)(nil).GetDelegationsByHolder), ctx, holder)
}

// GetDelegationsByValidatorId mocks base method.
func (m *MockDBDriver) GetDelegationsByValidatorId(ctx context.Context, validatorId *uint64) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByValidatorId", ctx, validatorId)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByValidatorId indicates an expected call of GetDelegationsByValidatorId.
func (mr *MockDBDriverMockRecorder) GetDelegationsByValidatorId(ctx, validatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByValidatorId", reflect.TypeOf((*MockDBDriver)(nil).GetDelegationsByValidatorId), ctx, validatorId)
}

// SaveOrUpdateValidator mocks base method.
func (m *MockDBDriver) SaveOrUpdateValidator(ctx context.Context, validator structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidator", ctx, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidator indicates an expected call of SaveOrUpdateValidator.
func (mr *MockDBDriverMockRecorder) SaveOrUpdateValidator(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidator", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateValidator), ctx, validator)
}

// SaveOrUpdateValidators mocks base method.
func (m *MockDBDriver) SaveOrUpdateValidators(ctx context.Context, validators []structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidators", ctx, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidators indicates an expected call of SaveOrUpdateValidators.
func (mr *MockDBDriverMockRecorder) SaveOrUpdateValidators(ctx, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidators", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateValidators), ctx, validators)
}

// GetValidatorById mocks base method.
func (m *MockDBDriver) GetValidatorById(ctx context.Context, id *string) (structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorById", ctx, id)
	ret0, _ := ret[0].(structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorById indicates an expected call of GetValidatorById.
func (mr *MockDBDriverMockRecorder) GetValidatorById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorById", reflect.TypeOf((*MockDBDriver)(nil).GetValidatorById), ctx, id)
}

// GetValidatorsByValidatorAddress mocks base method.
func (m *MockDBDriver) GetValidatorsByValidatorAddress(ctx context.Context, validatorAddress *string) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByValidatorAddress", ctx, validatorAddress)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByValidatorAddress indicates an expected call of GetValidatorsByValidatorAddress.
func (mr *MockDBDriverMockRecorder) GetValidatorsByValidatorAddress(ctx, validatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByValidatorAddress", reflect.TypeOf((*MockDBDriver)(nil).GetValidatorsByValidatorAddress), ctx, validatorAddress)
}

// GetValidatorsByRequestedAddress mocks base method.
func (m *MockDBDriver) GetValidatorsByRequestedAddress(ctx context.Context, requestedAddress *string) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByRequestedAddress", ctx, requestedAddress)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByRequestedAddress indicates an expected call of GetValidatorsByRequestedAddress.
func (mr *MockDBDriverMockRecorder) GetValidatorsByRequestedAddress(ctx, requestedAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByRequestedAddress", reflect.TypeOf((*MockDBDriver)(nil).GetValidatorsByRequestedAddress), ctx, requestedAddress)
}

// MockDataStore is a mock of DataStore interface.
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore.
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance.
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateDelegation mocks base method.
func (m *MockDataStore) SaveOrUpdateDelegation(ctx context.Context, delegation structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegation indicates an expected call of SaveOrUpdateDelegation.
func (mr *MockDataStoreMockRecorder) SaveOrUpdateDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegation", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateDelegation), ctx, delegation)
}

// SaveOrUpdateDelegations mocks base method.
func (m *MockDataStore) SaveOrUpdateDelegations(ctx context.Context, delegations []structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegations", ctx, delegations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegations indicates an expected call of SaveOrUpdateDelegations.
func (mr *MockDataStoreMockRecorder) SaveOrUpdateDelegations(ctx, delegations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegations", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateDelegations), ctx, delegations)
}

// GetDelegationById mocks base method.
func (m *MockDataStore) GetDelegationById(ctx context.Context, id *string) (structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationById", ctx, id)
	ret0, _ := ret[0].(structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationById indicates an expected call of GetDelegationById.
func (mr *MockDataStoreMockRecorder) GetDelegationById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationById", reflect.TypeOf((*MockDataStore)(nil).GetDelegationById), ctx, id)
}

// GetDelegationsByHolder mocks base method.
func (m *MockDataStore) GetDelegationsByHolder(ctx context.Context, holder *string) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByHolder", ctx, holder)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByHolder indicates an expected call of GetDelegationsByHolder.
func (mr *MockDataStoreMockRecorder) GetDelegationsByHolder(ctx, holder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByHolder", reflect.TypeOf((*MockDataStore)(nil).GetDelegationsByHolder), ctx, holder)
}

// GetDelegationsByValidatorId mocks base method.
func (m *MockDataStore) GetDelegationsByValidatorId(ctx context.Context, validatorId *uint64) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByValidatorId", ctx, validatorId)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByValidatorId indicates an expected call of GetDelegationsByValidatorId.
func (mr *MockDataStoreMockRecorder) GetDelegationsByValidatorId(ctx, validatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByValidatorId", reflect.TypeOf((*MockDataStore)(nil).GetDelegationsByValidatorId), ctx, validatorId)
}

// SaveOrUpdateValidator mocks base method.
func (m *MockDataStore) SaveOrUpdateValidator(ctx context.Context, validator structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidator", ctx, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidator indicates an expected call of SaveOrUpdateValidator.
func (mr *MockDataStoreMockRecorder) SaveOrUpdateValidator(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidator", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateValidator), ctx, validator)
}

// SaveOrUpdateValidators mocks base method.
func (m *MockDataStore) SaveOrUpdateValidators(ctx context.Context, validators []structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidators", ctx, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidators indicates an expected call of SaveOrUpdateValidators.
func (mr *MockDataStoreMockRecorder) SaveOrUpdateValidators(ctx, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidators", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateValidators), ctx, validators)
}

// GetValidatorById mocks base method.
func (m *MockDataStore) GetValidatorById(ctx context.Context, id *string) (structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorById", ctx, id)
	ret0, _ := ret[0].(structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorById indicates an expected call of GetValidatorById.
func (mr *MockDataStoreMockRecorder) GetValidatorById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorById", reflect.TypeOf((*MockDataStore)(nil).GetValidatorById), ctx, id)
}

// GetValidatorsByValidatorAddress mocks base method.
func (m *MockDataStore) GetValidatorsByValidatorAddress(ctx context.Context, validatorAddress *string) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByValidatorAddress", ctx, validatorAddress)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByValidatorAddress indicates an expected call of GetValidatorsByValidatorAddress.
func (mr *MockDataStoreMockRecorder) GetValidatorsByValidatorAddress(ctx, validatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByValidatorAddress", reflect.TypeOf((*MockDataStore)(nil).GetValidatorsByValidatorAddress), ctx, validatorAddress)
}

// GetValidatorsByRequestedAddress mocks base method.
func (m *MockDataStore) GetValidatorsByRequestedAddress(ctx context.Context, requestedAddress *string) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByRequestedAddress", ctx, requestedAddress)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByRequestedAddress indicates an expected call of GetValidatorsByRequestedAddress.
func (mr *MockDataStoreMockRecorder) GetValidatorsByRequestedAddress(ctx, requestedAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByRequestedAddress", reflect.TypeOf((*MockDataStore)(nil).GetValidatorsByRequestedAddress), ctx, requestedAddress)
}

// MockDelegationStore is a mock of DelegationStore interface.
type MockDelegationStore struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationStoreMockRecorder
}

// MockDelegationStoreMockRecorder is the mock recorder for MockDelegationStore.
type MockDelegationStoreMockRecorder struct {
	mock *MockDelegationStore
}

// NewMockDelegationStore creates a new mock instance.
func NewMockDelegationStore(ctrl *gomock.Controller) *MockDelegationStore {
	mock := &MockDelegationStore{ctrl: ctrl}
	mock.recorder = &MockDelegationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDelegationStore) EXPECT() *MockDelegationStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateDelegation mocks base method.
func (m *MockDelegationStore) SaveOrUpdateDelegation(ctx context.Context, delegation structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegation", ctx, delegation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegation indicates an expected call of SaveOrUpdateDelegation.
func (mr *MockDelegationStoreMockRecorder) SaveOrUpdateDelegation(ctx, delegation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegation", reflect.TypeOf((*MockDelegationStore)(nil).SaveOrUpdateDelegation), ctx, delegation)
}

// SaveOrUpdateDelegations mocks base method.
func (m *MockDelegationStore) SaveOrUpdateDelegations(ctx context.Context, delegations []structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegations", ctx, delegations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegations indicates an expected call of SaveOrUpdateDelegations.
func (mr *MockDelegationStoreMockRecorder) SaveOrUpdateDelegations(ctx, delegations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegations", reflect.TypeOf((*MockDelegationStore)(nil).SaveOrUpdateDelegations), ctx, delegations)
}

// GetDelegationById mocks base method.
func (m *MockDelegationStore) GetDelegationById(ctx context.Context, id *string) (structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationById", ctx, id)
	ret0, _ := ret[0].(structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationById indicates an expected call of GetDelegationById.
func (mr *MockDelegationStoreMockRecorder) GetDelegationById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationById", reflect.TypeOf((*MockDelegationStore)(nil).GetDelegationById), ctx, id)
}

// GetDelegationsByHolder mocks base method.
func (m *MockDelegationStore) GetDelegationsByHolder(ctx context.Context, holder *string) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByHolder", ctx, holder)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByHolder indicates an expected call of GetDelegationsByHolder.
func (mr *MockDelegationStoreMockRecorder) GetDelegationsByHolder(ctx, holder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByHolder", reflect.TypeOf((*MockDelegationStore)(nil).GetDelegationsByHolder), ctx, holder)
}

// GetDelegationsByValidatorId mocks base method.
func (m *MockDelegationStore) GetDelegationsByValidatorId(ctx context.Context, validatorId *uint64) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegationsByValidatorId", ctx, validatorId)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegationsByValidatorId indicates an expected call of GetDelegationsByValidatorId.
func (mr *MockDelegationStoreMockRecorder) GetDelegationsByValidatorId(ctx, validatorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegationsByValidatorId", reflect.TypeOf((*MockDelegationStore)(nil).GetDelegationsByValidatorId), ctx, validatorId)
}

// MockValidatorStore is a mock of ValidatorStore interface.
type MockValidatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorStoreMockRecorder
}

// MockValidatorStoreMockRecorder is the mock recorder for MockValidatorStore.
type MockValidatorStoreMockRecorder struct {
	mock *MockValidatorStore
}

// NewMockValidatorStore creates a new mock instance.
func NewMockValidatorStore(ctrl *gomock.Controller) *MockValidatorStore {
	mock := &MockValidatorStore{ctrl: ctrl}
	mock.recorder = &MockValidatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidatorStore) EXPECT() *MockValidatorStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateValidator mocks base method.
func (m *MockValidatorStore) SaveOrUpdateValidator(ctx context.Context, validator structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidator", ctx, validator)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidator indicates an expected call of SaveOrUpdateValidator.
func (mr *MockValidatorStoreMockRecorder) SaveOrUpdateValidator(ctx, validator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidator", reflect.TypeOf((*MockValidatorStore)(nil).SaveOrUpdateValidator), ctx, validator)
}

// SaveOrUpdateValidators mocks base method.
func (m *MockValidatorStore) SaveOrUpdateValidators(ctx context.Context, validators []structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidators", ctx, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidators indicates an expected call of SaveOrUpdateValidators.
func (mr *MockValidatorStoreMockRecorder) SaveOrUpdateValidators(ctx, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidators", reflect.TypeOf((*MockValidatorStore)(nil).SaveOrUpdateValidators), ctx, validators)
}

// GetValidatorById mocks base method.
func (m *MockValidatorStore) GetValidatorById(ctx context.Context, id *string) (structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorById", ctx, id)
	ret0, _ := ret[0].(structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorById indicates an expected call of GetValidatorById.
func (mr *MockValidatorStoreMockRecorder) GetValidatorById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorById", reflect.TypeOf((*MockValidatorStore)(nil).GetValidatorById), ctx, id)
}

// GetValidatorsByValidatorAddress mocks base method.
func (m *MockValidatorStore) GetValidatorsByValidatorAddress(ctx context.Context, validatorAddress *string) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByValidatorAddress", ctx, validatorAddress)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByValidatorAddress indicates an expected call of GetValidatorsByValidatorAddress.
func (mr *MockValidatorStoreMockRecorder) GetValidatorsByValidatorAddress(ctx, validatorAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByValidatorAddress", reflect.TypeOf((*MockValidatorStore)(nil).GetValidatorsByValidatorAddress), ctx, validatorAddress)
}

// GetValidatorsByRequestedAddress mocks base method.
func (m *MockValidatorStore) GetValidatorsByRequestedAddress(ctx context.Context, requestedAddress *string) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorsByRequestedAddress", ctx, requestedAddress)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorsByRequestedAddress indicates an expected call of GetValidatorsByRequestedAddress.
func (mr *MockValidatorStoreMockRecorder) GetValidatorsByRequestedAddress(ctx, requestedAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorsByRequestedAddress", reflect.TypeOf((*MockValidatorStore)(nil).GetValidatorsByRequestedAddress), ctx, requestedAddress)
}
