// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	structs "github.com/figment-networks/skale-indexer/structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBDriver is a mock of DBDriver interface
type MockDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDBDriverMockRecorder
}

// MockDBDriverMockRecorder is the mock recorder for MockDBDriver
type MockDBDriverMockRecorder struct {
	mock *MockDBDriver
}

// NewMockDBDriver creates a new mock instance
func NewMockDBDriver(ctrl *gomock.Controller) *MockDBDriver {
	mock := &MockDBDriver{ctrl: ctrl}
	mock.recorder = &MockDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBDriver) EXPECT() *MockDBDriverMockRecorder {
	return m.recorder
}

// SaveOrUpdateDelegations mocks base method
func (m *MockDBDriver) SaveOrUpdateDelegations(ctx context.Context, delegations []structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegations", ctx, delegations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegations indicates an expected call of SaveOrUpdateDelegations
func (mr *MockDBDriverMockRecorder) SaveOrUpdateDelegations(ctx, delegations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegations", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateDelegations), ctx, delegations)
}

// GetDelegations mocks base method
func (m *MockDBDriver) GetDelegations(ctx context.Context, params structs.QueryParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockDBDriverMockRecorder) GetDelegations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDBDriver)(nil).GetDelegations), ctx, params)
}

// SaveOrUpdateEvents mocks base method
func (m *MockDBDriver) SaveOrUpdateEvents(ctx context.Context, events []structs.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateEvents indicates an expected call of SaveOrUpdateEvents
func (mr *MockDBDriverMockRecorder) SaveOrUpdateEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateEvents", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateEvents), ctx, events)
}

// GetEventById mocks base method
func (m *MockDBDriver) GetEventById(ctx context.Context, id string) (structs.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, id)
	ret0, _ := ret[0].(structs.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById
func (mr *MockDBDriverMockRecorder) GetEventById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockDBDriver)(nil).GetEventById), ctx, id)
}

// GetAllEvents mocks base method
func (m *MockDBDriver) GetAllEvents(ctx context.Context) ([]structs.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx)
	ret0, _ := ret[0].([]structs.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents
func (mr *MockDBDriverMockRecorder) GetAllEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockDBDriver)(nil).GetAllEvents), ctx)
}

// SaveOrUpdateValidators mocks base method
func (m *MockDBDriver) SaveOrUpdateValidators(ctx context.Context, validators []structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidators", ctx, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidators indicates an expected call of SaveOrUpdateValidators
func (mr *MockDBDriverMockRecorder) SaveOrUpdateValidators(ctx, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidators", reflect.TypeOf((*MockDBDriver)(nil).SaveOrUpdateValidators), ctx, validators)
}

// GetValidators mocks base method
func (m *MockDBDriver) GetValidators(ctx context.Context, params structs.QueryParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx, params)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockDBDriverMockRecorder) GetValidators(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockDBDriver)(nil).GetValidators), ctx, params)
}

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateDelegations mocks base method
func (m *MockDataStore) SaveOrUpdateDelegations(ctx context.Context, delegations []structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegations", ctx, delegations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegations indicates an expected call of SaveOrUpdateDelegations
func (mr *MockDataStoreMockRecorder) SaveOrUpdateDelegations(ctx, delegations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegations", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateDelegations), ctx, delegations)
}

// GetDelegations mocks base method
func (m *MockDataStore) GetDelegations(ctx context.Context, params structs.QueryParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockDataStoreMockRecorder) GetDelegations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDataStore)(nil).GetDelegations), ctx, params)
}

// SaveOrUpdateEvents mocks base method
func (m *MockDataStore) SaveOrUpdateEvents(ctx context.Context, events []structs.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateEvents indicates an expected call of SaveOrUpdateEvents
func (mr *MockDataStoreMockRecorder) SaveOrUpdateEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateEvents", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateEvents), ctx, events)
}

// GetEventById mocks base method
func (m *MockDataStore) GetEventById(ctx context.Context, id string) (structs.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, id)
	ret0, _ := ret[0].(structs.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById
func (mr *MockDataStoreMockRecorder) GetEventById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockDataStore)(nil).GetEventById), ctx, id)
}

// GetAllEvents mocks base method
func (m *MockDataStore) GetAllEvents(ctx context.Context) ([]structs.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx)
	ret0, _ := ret[0].([]structs.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents
func (mr *MockDataStoreMockRecorder) GetAllEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockDataStore)(nil).GetAllEvents), ctx)
}

// SaveOrUpdateValidators mocks base method
func (m *MockDataStore) SaveOrUpdateValidators(ctx context.Context, validators []structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidators", ctx, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidators indicates an expected call of SaveOrUpdateValidators
func (mr *MockDataStoreMockRecorder) SaveOrUpdateValidators(ctx, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidators", reflect.TypeOf((*MockDataStore)(nil).SaveOrUpdateValidators), ctx, validators)
}

// GetValidators mocks base method
func (m *MockDataStore) GetValidators(ctx context.Context, params structs.QueryParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx, params)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockDataStoreMockRecorder) GetValidators(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockDataStore)(nil).GetValidators), ctx, params)
}

// MockDelegationStore is a mock of DelegationStore interface
type MockDelegationStore struct {
	ctrl     *gomock.Controller
	recorder *MockDelegationStoreMockRecorder
}

// MockDelegationStoreMockRecorder is the mock recorder for MockDelegationStore
type MockDelegationStoreMockRecorder struct {
	mock *MockDelegationStore
}

// NewMockDelegationStore creates a new mock instance
func NewMockDelegationStore(ctrl *gomock.Controller) *MockDelegationStore {
	mock := &MockDelegationStore{ctrl: ctrl}
	mock.recorder = &MockDelegationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDelegationStore) EXPECT() *MockDelegationStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateDelegations mocks base method
func (m *MockDelegationStore) SaveOrUpdateDelegations(ctx context.Context, delegations []structs.Delegation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateDelegations", ctx, delegations)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateDelegations indicates an expected call of SaveOrUpdateDelegations
func (mr *MockDelegationStoreMockRecorder) SaveOrUpdateDelegations(ctx, delegations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateDelegations", reflect.TypeOf((*MockDelegationStore)(nil).SaveOrUpdateDelegations), ctx, delegations)
}

// GetDelegations mocks base method
func (m *MockDelegationStore) GetDelegations(ctx context.Context, params structs.QueryParams) ([]structs.Delegation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelegations", ctx, params)
	ret0, _ := ret[0].([]structs.Delegation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelegations indicates an expected call of GetDelegations
func (mr *MockDelegationStoreMockRecorder) GetDelegations(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelegations", reflect.TypeOf((*MockDelegationStore)(nil).GetDelegations), ctx, params)
}

// MockEventStore is a mock of EventStore interface
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateEvents mocks base method
func (m *MockEventStore) SaveOrUpdateEvents(ctx context.Context, events []structs.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateEvents", ctx, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateEvents indicates an expected call of SaveOrUpdateEvents
func (mr *MockEventStoreMockRecorder) SaveOrUpdateEvents(ctx, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateEvents", reflect.TypeOf((*MockEventStore)(nil).SaveOrUpdateEvents), ctx, events)
}

// GetEventById mocks base method
func (m *MockEventStore) GetEventById(ctx context.Context, id string) (structs.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventById", ctx, id)
	ret0, _ := ret[0].(structs.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventById indicates an expected call of GetEventById
func (mr *MockEventStoreMockRecorder) GetEventById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventById", reflect.TypeOf((*MockEventStore)(nil).GetEventById), ctx, id)
}

// GetAllEvents mocks base method
func (m *MockEventStore) GetAllEvents(ctx context.Context) ([]structs.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEvents", ctx)
	ret0, _ := ret[0].([]structs.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEvents indicates an expected call of GetAllEvents
func (mr *MockEventStoreMockRecorder) GetAllEvents(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEvents", reflect.TypeOf((*MockEventStore)(nil).GetAllEvents), ctx)
}

// MockValidatorStore is a mock of ValidatorStore interface
type MockValidatorStore struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorStoreMockRecorder
}

// MockValidatorStoreMockRecorder is the mock recorder for MockValidatorStore
type MockValidatorStoreMockRecorder struct {
	mock *MockValidatorStore
}

// NewMockValidatorStore creates a new mock instance
func NewMockValidatorStore(ctrl *gomock.Controller) *MockValidatorStore {
	mock := &MockValidatorStore{ctrl: ctrl}
	mock.recorder = &MockValidatorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidatorStore) EXPECT() *MockValidatorStoreMockRecorder {
	return m.recorder
}

// SaveOrUpdateValidators mocks base method
func (m *MockValidatorStore) SaveOrUpdateValidators(ctx context.Context, validators []structs.Validator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOrUpdateValidators", ctx, validators)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOrUpdateValidators indicates an expected call of SaveOrUpdateValidators
func (mr *MockValidatorStoreMockRecorder) SaveOrUpdateValidators(ctx, validators interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOrUpdateValidators", reflect.TypeOf((*MockValidatorStore)(nil).SaveOrUpdateValidators), ctx, validators)
}

// GetValidators mocks base method
func (m *MockValidatorStore) GetValidators(ctx context.Context, params structs.QueryParams) ([]structs.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators", ctx, params)
	ret0, _ := ret[0].([]structs.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidators indicates an expected call of GetValidators
func (mr *MockValidatorStoreMockRecorder) GetValidators(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockValidatorStore)(nil).GetValidators), ctx, params)
}
