// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	structs "github.com/figment-networks/skale-indexer/structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBDriver is a mock of DBDriver interface
type MockDBDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDBDriverMockRecorder
}

// MockDBDriverMockRecorder is the mock recorder for MockDBDriver
type MockDBDriverMockRecorder struct {
	mock *MockDBDriver
}

// NewMockDBDriver creates a new mock instance
func NewMockDBDriver(ctrl *gomock.Controller) *MockDBDriver {
	mock := &MockDBDriver{ctrl: ctrl}
	mock.recorder = &MockDBDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBDriver) EXPECT() *MockDBDriverMockRecorder {
	return m.recorder
}

// SaveContractEvent mocks base method
func (m *MockDBDriver) SaveContractEvent(ctx context.Context, contractEvent structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", ctx, contractEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockDBDriverMockRecorder) SaveContractEvent(ctx, contractEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockDBDriver)(nil).SaveContractEvent), ctx, contractEvent)
}

// GetContractEvents mocks base method
func (m *MockDBDriver) GetContractEvents(ctx context.Context, params structs.QueryParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", ctx, params)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockDBDriverMockRecorder) GetContractEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockDBDriver)(nil).GetContractEvents), ctx, params)
}

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// SaveContractEvent mocks base method
func (m *MockDataStore) SaveContractEvent(ctx context.Context, contractEvent structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", ctx, contractEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockDataStoreMockRecorder) SaveContractEvent(ctx, contractEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockDataStore)(nil).SaveContractEvent), ctx, contractEvent)
}

// GetContractEvents mocks base method
func (m *MockDataStore) GetContractEvents(ctx context.Context, params structs.QueryParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", ctx, params)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockDataStoreMockRecorder) GetContractEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockDataStore)(nil).GetContractEvents), ctx, params)
}

// MockContractEventStore is a mock of ContractEventStore interface
type MockContractEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockContractEventStoreMockRecorder
}

// MockContractEventStoreMockRecorder is the mock recorder for MockContractEventStore
type MockContractEventStoreMockRecorder struct {
	mock *MockContractEventStore
}

// NewMockContractEventStore creates a new mock instance
func NewMockContractEventStore(ctrl *gomock.Controller) *MockContractEventStore {
	mock := &MockContractEventStore{ctrl: ctrl}
	mock.recorder = &MockContractEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractEventStore) EXPECT() *MockContractEventStoreMockRecorder {
	return m.recorder
}

// SaveContractEvent mocks base method
func (m *MockContractEventStore) SaveContractEvent(ctx context.Context, contractEvent structs.ContractEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveContractEvent", ctx, contractEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveContractEvent indicates an expected call of SaveContractEvent
func (mr *MockContractEventStoreMockRecorder) SaveContractEvent(ctx, contractEvent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveContractEvent", reflect.TypeOf((*MockContractEventStore)(nil).SaveContractEvent), ctx, contractEvent)
}

// GetContractEvents mocks base method
func (m *MockContractEventStore) GetContractEvents(ctx context.Context, params structs.QueryParams) ([]structs.ContractEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractEvents", ctx, params)
	ret0, _ := ret[0].([]structs.ContractEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractEvents indicates an expected call of GetContractEvents
func (mr *MockContractEventStoreMockRecorder) GetContractEvents(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractEvents", reflect.TypeOf((*MockContractEventStore)(nil).GetContractEvents), ctx, params)
}
